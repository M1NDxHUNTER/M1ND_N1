{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","Winner","h","state","count","i","line","winnerLine","squares","alert","setTimeout","setState","Array","fill","clickhandler","event","console","log","data","target","getAttribute","currentSquares","className","onClick","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAwGeA,G,wDAhFb,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IAiBNC,OAAS,WAER,IADA,IAAIC,EAAK,EAAKC,MAAMC,MAAQ,IAAM,EAAK,IAAM,IACpCC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IAAIC,EAAO,EAAKC,WAAWF,GACvB,EAAKF,MAAMK,QAAQF,EAAK,MAAQJ,GAChC,EAAKC,MAAMK,QAAQF,EAAK,MAAQJ,GAChC,EAAKC,MAAMK,QAAQF,EAAK,MAAQJ,IAClCO,MAAMP,EAAI,+CACVQ,YAAW,WACV,EAAKC,SAAS,CAACH,QAAUI,MAAM,GAAGC,KAAK,QACvC,EAAKF,SAAS,CAACP,MAAO,MACpB,OAGmB,IAArB,EAAKD,MAAMC,QACdK,MAAM,kCACNC,YAAW,WACV,EAAKC,SAAS,CAACH,QAAUI,MAAM,GAAGC,KAAK,QACvC,EAAKF,SAAS,CAACP,MAAO,MACpB,QArCY,EAwCjBU,aAAe,SAAAC,GACdC,QAAQC,IAAI,GACZ,IAAIC,EAAOH,EAAMI,OAAOC,aAAa,QACjCC,EAAiB,EAAKlB,MAAMK,QAChCQ,QAAQC,IAAII,GACiB,OAAzBA,EAAeH,IACnBG,EAAeH,GAAS,EAAKf,MAAMC,MAAQ,IAAM,EAAK,IAAM,IAC5D,EAAKO,SAAS,CAACP,MAAQ,EAAKD,MAAMC,MAAQ,IAC1C,EAAKO,SAAS,CAACH,QAAUa,KAGzBZ,MAAM,0DAEP,EAAKR,UAnDL,EAAKE,MAAQ,CACXK,QAASI,MAAM,GAAGC,KAAK,MACvBT,MAAQ,GAEV,EAAKG,WAAa,CACjB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAdS,E,qDAwDjB,OACC,yBAAKe,UAAU,WACf,yBAAKA,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACxDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,IACpB,yBAAKc,UAAU,UAAUC,QAASC,KAAKV,aAAcI,KAAK,KACzDM,KAAKrB,MAAMK,QAAQ,S,GA5ENiB,IAAMC,YCXLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.f9c2ccf1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// const App = () => {\n//   return (\n//   \t<div className = 'app-wrapper'>\n//   \t<header className = 'header'>\n//   \t</header>\n//   \t\t<nav className = 'nav'>\n//   \t\t\t<div>\n//   \t\t\t<a>Расписание</a>\n//   \t\t\t</div>\n//   \t\t\t<div>\n// \t\t\t<a>Pictures</a>\n//    \t\t    </div>\n//    \t    \t<div>\n//  \t\t\t<a>Messages</a>\n//  \t\t\t</div>\n//  \t\t</nav>\n//   \t<div className = 'content'></div>\n//   \t</div>\n//);\n  \n\tclass App extends React.Component {\n\t\tconstructor(props){\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\t\tsquares: Array(9).fill(null),\n\t\t\t\t\tcount : 0\n\t\t\t}\n\t\t\tthis.winnerLine = [\n\t\t\t\t[0, 1, 2],\n\t\t\t\t[3, 4, 5],\n\t\t\t\t[6, 7, 8],\n\t\t\t\t[0, 3, 6],\n\t\t\t\t[1, 4, 7],\n\t\t\t\t[2, 5, 8],\n\t\t\t\t[0, 4, 8],\n\t\t\t\t[2, 4, 6]\n\t\t\t]\n\n\t\t}\n\t\t\tWinner = () => {\n\t\t\t\tlet h = (this.state.count % 2 === 0) ? 'X' : 'O';\n\t\t\t\tfor (let i = 0; i < 8; i++) {\n\t\t\t\t\tlet line = this.winnerLine[i];\n\t\t\t\t\tif (this.state.squares[line[0]] === h \n\t\t\t\t\t\t&& this.state.squares[line[1]] === h\n\t\t\t\t\t\t&& this.state.squares[line[2]] === h) {\n\t\t\t\t\t\t\talert(h + ' Победил');\n\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\tthis.setState({squares : Array(9).fill(null) });\n\t\t\t\t\t\t\t\tthis.setState({count: 0});\n\t\t\t\t\t\t\t}, 1500)\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.state.count === 8){\n\t\t\t\t\talert('Ничья');\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.setState({squares : Array(9).fill(null) });\n\t\t\t\t\t\tthis.setState({count: 0});\n\t\t\t\t\t}, 1500)\n\t\t\t\t}\n\t\t}\n\t\t\tclickhandler = event => {\n\t\t\t\tconsole.log(1);\n\t\t\t\tlet data = event.target.getAttribute('data');\n\t\t\t\tlet currentSquares = this.state.squares;\n\t\t\t\tconsole.log(currentSquares);\n\t\t\t\tif (currentSquares[data] === null){\n\t\t\t\tcurrentSquares[data] = (this.state.count % 2 === 0) ? 'X' : 'O';\n\t\t\t\tthis.setState({count : this.state.count + 1});\n\t\t\t\tthis.setState({squares : currentSquares});\n\t\t\t}\n\t\t\telse {\n\t\t\t\talert('Запрещено');\n\t\t\t}\n\t\t\tthis.Winner();\n\t\t}\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<div className=\"tic-tac\">\n\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"0\">\n\t\t\t\t\t{this.state.squares[0]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"1\">\n\t\t\t\t\t{this.state.squares[1]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"2\">\n\t\t\t\t\t{this.state.squares[2]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"3\">\n\t\t\t\t\t{this.state.squares[3]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"4\">\n\t\t\t\t\t{this.state.squares[4]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"5\">\n\t\t\t\t\t{this.state.squares[5]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"6\">\n\t\t\t\t\t{this.state.squares[6]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"7\">\n\t\t\t\t\t{this.state.squares[7]}</div>\n\t\t\t\t\t<div className=\"ttt-one\" onClick={this.clickhandler} data=\"8\">\n\t\t\t\t\t{this.state.squares[8]}</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}